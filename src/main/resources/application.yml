spring:
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
  batch:
    job:
      enabled: false # job 자동실행 막는다. default = true
      names: ${job.name:NONE} # --job.name=JOBNAME1,JOBNAME2 name=... date= ...
    jdbc:
      initialize-schema: ALWAYS
  quartz:
    job-store-type: jdbc #Database Mode
    jdbc:
      initialize-schema: ALWAYS #Do initialize table structure
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO #Default hostname and timestamp generate instance ID, which can be any string, but must be the only corresponding qrtz_scheduler_state INSTANCE_NAME field for all dispatchers
            #instanceName: clusteredScheduler #quartzScheduler
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX #Persistence Configuration
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #We only make database-specific proxies for databases
            useProperties: false #Indicates that JDBC JobStore stores all values in JobDataMaps as strings, so more complex objects can be stored as name-value pairs rather than serialized in BLOB columns.In the long run, this is safer because you avoid serializing non-String classes to BLOB class versions.
            misfireThreshold: 60000 #The number of milliseconds the dispatcher will "tolerate" a Trigger to pass its next startup time before being considered a "fire".The default value (if you do not enter this property in the configuration) is 60000 (60 seconds).
            clusterCheckinInterval: 5000 #Set the frequency (in milliseconds) of this instance'checkin'* with other instances of the cluster.Affects the speed of detecting failed instances.
            isClustered: true #Turn on Clustering
          threadPool: #Connection Pool
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 8
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
logging:
  level:
    #http request logging
#    org.apache.coyote.http11: debug
#    com.docswave.v3.api: debug
    org:
      hibernate:
        SQL: debug
        type.descriptor.sql.BasicBinder: trace

docwave:
  batch:
    group: docwave-v3
    jobs:
      rest: rest
      payment: payment
